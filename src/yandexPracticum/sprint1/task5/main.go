package main

import (
	"fmt"
)

func main(){

	var (
		a int=5 //integer
	 	p *int) //pointer

	p=&a //adress getting

	fmt.Println(a,p)

//Литералы композитных типов создают в памяти переменную соответствующего типа, 
//поэтому указатель можно создать вот так:

	type R struct {
		IntField int
	}
	// Литерал А{} создаёт в памяти переменную типа А. Затем от неё берётся указатель
	g := &R{ 
		IntField: 10,
	}
	fmt.Println(g)

//Чтобы получить или изменить значение, хранящееся по указателю, 
//применяют оператор разыменования (dereference) *.
	
i := 42
	f := &i
	// читаем значение переменной i через указатель p
	fmt.Println(*f) 
	// записываем в переменную i значение 21 через указатель p
	*f = 21     
	
//Для указателей на структуры в Go есть возможность 
//неявного разыменования при доступе к полям структуры.
	
type F struct {
		IntField int
	}
	
	d := &F{}
	d.IntField = 42 // вместо (*p).IntField = 42
}